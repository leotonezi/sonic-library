name: Sonic Library CI

on:
  push:
    branches: [master, development]
  pull_request:
    branches: [master, development]

jobs:
  backend:
    runs-on: ubuntu-latest
    env:
      COMPOSE_PROJECT_NAME: backendci
      DATABASE_URL: postgresql+psycopg2://postgres:password@db:5432/fastlibrary
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      NEXT_PUBLIC_BACKEND_URL: http://fastapi:8000
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      MAIL_SERVER: ${{ secrets.MAIL_SERVER }}
      MAIL_FROM: ${{ secrets.MAIL_FROM }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          clean: true

      - name: Remove all untracked files and directories
        run: git clean -fdx

      - name: Clean up old containers
        run: docker compose down --volumes --remove-orphans || true

      - name: üê≥ Build Docker images (backend only)
        run: docker compose -f docker-compose.yml build fastapi

      - name: üê≥ Start Docker Compose (backend only)
        run: docker compose -f docker-compose.yml up -d fastapi db

      - name: ‚è≥ Wait for backend services to become healthy
        run: |
          echo "Waiting for backend services to be healthy..."
          for i in {1..10}; do
            STATUS=$(docker compose ps | grep "healthy")
            RUNNING=$(docker compose ps | grep "fastapi" | grep "Up")
            if [ -n "$STATUS" ] && [ -n "$RUNNING" ]; then
              echo "‚úÖ Backend services are healthy and running!"
              break
            fi
            echo "‚è≥ Still waiting... ($i/10)"
            sleep 5
          done
          if [ -z "$STATUS" ] || [ -z "$RUNNING" ]; then
            echo "‚ùå Backend services failed to become healthy or crashed."
            docker compose logs
            exit 1
          fi

      - name: Create test database
        run: docker compose exec -T db psql -U postgres -c "CREATE DATABASE fastlibrary_test;"

      - name: üõ†Ô∏è Install test dependencies
        run: docker compose exec -T fastapi pip install faker

      - name: üóÑÔ∏è Apply migrations to test database
        run: |
          docker compose exec -T fastapi bash -c "
            export TEST_DATABASE_URL=postgresql+psycopg2://postgres:password@db:5432/fastlibrary_test
            cd /app && TEST_DATABASE_URL=postgresql+psycopg2://postgres:password@db:5432/fastlibrary_test alembic upgrade head
          "

      - name: üß™ Run backend tests with test environment
        run: |
          docker compose exec -T fastapi bash -c "
            export DATABASE_URL=postgresql+psycopg2://postgres:password@db:5432/fastlibrary_test
            export TEST_DATABASE_URL=postgresql+psycopg2://postgres:password@db:5432/fastlibrary_test
            export ENV=test
            export PROJECT_NAME=SonicLibraryTest
            export SECRET_KEY=test_key
            export ALGORITHM=HS256
            export ACCESS_TOKEN_EXPIRE_MINUTES=15
            export PYTHONPATH=/app
            cd /app && python -c \"from app.core.config import settings; print(f'DATABASE_URL: {settings.DATABASE_URL}')\"
            cd /app && pytest -vv --log-cli-level=DEBUG
          "
        timeout-minutes: 10

      - name: üìú Output container logs on test failure
        if: failure()
        run: docker compose logs fastapi

      - name: Drop test database
        if: always()
        run: docker compose exec -T db psql -U postgres -c "DROP DATABASE IF EXISTS fastlibrary_test;"

      - name: üßπ Teardown
        if: always()
        run: docker compose down --volumes --remove-orphans

  frontend:
    runs-on: ubuntu-latest
    env:
      COMPOSE_PROJECT_NAME: frontendci
      NEXT_PUBLIC_BACKEND_URL: http://fastapi:8000
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          clean: true

      - name: Clean up old containers
        run: docker compose down --volumes --remove-orphans || true

      - name: üê≥ Build Docker images (frontend only)
        run: docker compose -f docker-compose.yml build frontend

      - name: üê≥ Start Docker Compose (frontend only)
        run: docker compose -f docker-compose.yml up -d frontend

      - name: üßπ Teardown
        if: always()
        run: docker compose down --volumes --remove-orphans

  release:
    if: github.ref == 'refs/heads/main'
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v3

      - name: üß∞ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: üì¶ Install semantic-release dependencies
        run: npm install

      - name: üöÄ Run Semantic Release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npx semantic-release
